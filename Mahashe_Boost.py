import tkinter as tk
from tkinter import messagebox, filedialog, simpledialog
import os
import ctypes
import subprocess
import requests
import zipfile
import io
import winreg

RAMMAP_URL = "https://download.sysinternals.com/files/RAMMap.zip"
RAMMAP_EXE = "RAMMap.exe"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ RAMMap
def download_rammap():
    try:
        rammap_path = os.path.join(os.getcwd(), RAMMAP_EXE)
        if not os.path.exists(rammap_path):
            messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞", "–°–∫–∞—á–∏–≤–∞–µ–º RAMMap...")
            r = requests.get(RAMMAP_URL)
            with zipfile.ZipFile(io.BytesIO(r.content)) as z:
                z.extractall(os.getcwd())
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
            eula_path = os.path.join(os.getcwd(), "eula.txt")
            rammap64a_path = os.path.join(os.getcwd(), "RAMMap64a.exe")
            for f in [eula_path, rammap64a_path]:
                if os.path.exists(f):
                    try:
                        os.remove(f)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {f}: {e}")
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "RAMMap —Å–∫–∞—á–∞–Ω –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω.")
        return rammap_path
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RAMMap: {e}")
        return None


# 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
def optimize_for_games():
    rammap_path = download_rammap()
    if rammap_path and os.path.exists(rammap_path):
        try:
            subprocess.run([rammap_path, "-Et"], shell=True)  # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RAMMap.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å: {e}")

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –∏–≥—Ä
GAMES_REG_PATH = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games"
GAMES_SETTINGS = {
    "GPU Priority": 8,
    "Priority": 6,
    "Scheduling Category": "High",
    "SFIO Priority": "High"
}

def apply_game_profile():
    try:
        key = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, GAMES_REG_PATH)
        for name, value in GAMES_SETTINGS.items():
            if isinstance(value, int):
                winreg.SetValueEx(key, name, 0, winreg.REG_DWORD, value)
            else:
                winreg.SetValueEx(key, name, 0, winreg.REG_SZ, value)
        winreg.CloseKey(key)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–º–µ–Ω—ë–Ω.")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    update_game_profile_status()

def check_game_profile_status():
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, GAMES_REG_PATH)
        all_set = True
        partial = False
        for name, value in GAMES_SETTINGS.items():
            try:
                val, regtype = winreg.QueryValueEx(key, name)
                if val != value:
                    all_set = False
                    partial = True
            except FileNotFoundError:
                all_set = False
        winreg.CloseKey(key)
        if all_set:
            return "‚úÖ"
        elif partial:
            return "‚ö†Ô∏è"
        else:
            return "‚ùå"
    except FileNotFoundError:
        return "‚ùå"

def update_game_profile_status():
    status = check_game_profile_status()
    lbl_game_profile_status.config(text=status)

# 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ Image File Execution Options —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
def add_process_high_priority():
    filepath = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (.exe)", filetypes=[("EXE files", "*.exe")])
    if not filepath:
        return
    proc_name = os.path.basename(filepath)
    try:
        reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\{}\PerfOptions".format(proc_name)
        key = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, reg_path)
        # 0x00000003 = High Priority
        winreg.SetValueEx(key, "CpuPriorityClass", 0, winreg.REG_DWORD, 3)
        winreg.CloseKey(key)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ü—Ä–æ—Ü–µ—Å—Å {proc_name} —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ Image File Execution Options
def remove_process_high_priority_by_name(proc_name):
    try:
        reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\{}".format(proc_name)
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–≤–µ—Ç–∫—É PerfOptions, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            winreg.DeleteKey(winreg.HKEY_LOCAL_MACHINE, reg_path + r"\PerfOptions")
        except FileNotFoundError:
            pass
        winreg.DeleteKey(winreg.HKEY_LOCAL_MACHINE, reg_path)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ü—Ä–æ—Ü–µ—Å—Å {proc_name} —É–¥–∞–ª—ë–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
    except FileNotFoundError:
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ü—Ä–æ—Ü–µ—Å—Å {proc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ.")
    except OSError as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}")

def remove_process_high_priority():
    filepath = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (.exe) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞",
                                          filetypes=[("EXE files", "*.exe")])
    if not filepath:
        return
    proc_name = os.path.basename(filepath)
    remove_process_high_priority_by_name(proc_name)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
def show_high_priority_processes():
    window = tk.Toplevel(root)
    window.title("–ü—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º")
    window.geometry("400x300")
    window.configure(bg="#222222")

    lbl = tk.Label(window, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", bg="#222222", fg="white", font=("Arial", 12))
    lbl.pack(pady=5)

    listbox = tk.Listbox(window, bg="#333333", fg="white", font=("Arial", 12), selectmode=tk.SINGLE)
    listbox.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options")
        i = 0
        procs = []
        while True:
            try:
                subkey_name = winreg.EnumKey(key, i)
                i += 1
                # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–ª—é—á PerfOptions —Å CpuPriorityClass=3
                try:
                    perf_key_path = r"{}\PerfOptions".format(subkey_name)
                    perf_key = winreg.OpenKey(key, perf_key_path)
                    val, regtype = winreg.QueryValueEx(perf_key, "CpuPriorityClass")
                    winreg.CloseKey(perf_key)
                    if val == 3:
                        procs.append(subkey_name)
                except FileNotFoundError:
                    pass
            except OSError:
                break
        winreg.CloseKey(key)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        window.destroy()
        return

    for proc in procs:
        listbox.insert(tk.END, proc)

    def delete_selected():
        sel = listbox.curselection()
        if not sel:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        proc_name = listbox.get(sel[0])
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {proc_name} –∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞?"):
            remove_process_high_priority_by_name(proc_name)
            listbox.delete(sel[0])

    btn_delete = tk.Button(window, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", command=delete_selected,
                           font=("Arial", 12), bg="#ff4444", fg="white")
    btn_delete.pack(pady=10)

# GUI
root = tk.Tk()
root.title("Mahashe Game Booster")
root.geometry("520x450")
root.configure(bg="#222222")

logo = tk.Label(root, text="üÖº Mahashe", font=("Arial", 24, "bold"), fg="white", bg="#222222")
logo.pack(pady=20)


frame_game_profile = tk.Frame(root, bg="#222222")
frame_game_profile.pack(pady=5)
btn_game_profile = tk.Button(frame_game_profile, text="üéÆ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å", command=apply_game_profile,
                             font=("Arial", 12), bg="#3399ff", fg="white", width=30)
btn_game_profile.pack(side=tk.LEFT)

lbl_game_profile_status = tk.Label(frame_game_profile, text="", font=("Arial", 20), fg="white", bg="#222222", width=3)
lbl_game_profile_status.pack(side=tk.LEFT, padx=10)

btn_add_process = tk.Button(root, text="üìå –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", command=add_process_high_priority,
                            font=("Arial", 12), bg="#4a0505", fg="white", width=40)
btn_add_process.pack(pady=10)

btn_remove_process = tk.Button(root, text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", command=remove_process_high_priority,
                               font=("Arial", 12), bg="#4a0505", fg="white", width=40)
btn_remove_process.pack(pady=5)

btn_optimize = tk.Button(root, text="üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (RAMMap)", command=optimize_for_games,
                         font=("Arial", 12), bg="#6f47ff", fg="white", width=40)
btn_optimize.pack(pady=10)
btn_show_list = tk.Button(root, text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", command=show_high_priority_processes,
                          font=("Arial", 12), bg="#3399ff", fg="white", width=40)
btn_show_list.pack(pady=10)

if not is_admin():
    messagebox.showwarning("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

update_game_profile_status()

root.mainloop()
